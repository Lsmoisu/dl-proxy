角色：资深Go网络工程师
任务：用Go语言实现HTTP反向代理下载服务，支持实时流式传输
1. 自动识别用户请求路径中的目标URL（如访问http://proxy.com/http://example.com/file.zip时提取后半段）
2. 支持HTTP/HTTPS双协议自动切换
3. 流式传输保障大文件下载稳定性
4. 自动过滤内网地址请求（使用正则匹配RFC1918私有地址段）
技术约束：
- 必须使用net/http标准库
- 必须使用io.Copy实现零拷贝传输
- 禁止存储任何文件到本地磁盘
- 支持Content-Length和Transfer-Encoding分块传输
- 超时设置：连接5s，传输300s
输出要求：
完整可运行的Go代码，包含错误处理机制输出，包含健康检查接口

角色：系统架构师
任务：为代理服务添加安全过滤层
需求分解：
1. 请求预处理：
   - 验证URL格式有效性（正则匹配完整URL结构）
   - 限制单IP请求频率（滑动窗口算法实现）

2. 传输优化：
   - 使用sync.Pool复用内存缓冲区
   - 设置分块传输阈值（>100MB文件启用chunked编码）

3. 错误处理：
   - 自定义HTTP状态码（如509 Bandwidth Limit Exceeded）
   - 异常请求日志记录（包含X-Request-ID追踪）
   - 崩溃恢复中间件（recover()保护）

技术约束：
- 通过1000并发压力测试
- 错误率低于0.1%


角色：协议栈开发专家
任务：完善代理请求头处理逻辑
处理要点：
1. 敏感头过滤：
   - 删除Proxy-*系列头
   - 重写Via头添加代理标识
   - 清理客户端敏感头（如Authorization）

2. 安全头注入：
   - 添加Content-Security-Policy
   - 设置Strict-Transport-Security
   - 包含X-Content-Type-Options

3. 追踪头设置：
   - 生成唯一X-Request-ID
   - 追加请求耗时头（X-Processing-Time）
   - 记录节点标识（X-Proxy-Node）

实现要求：
通过中间件模式实现，与核心代理逻辑解耦

角色：质量保障工程师
任务：生成自动化测试用例
测试场景：
1. 有效用例：
   - 10GB大文件流式下载（校验MD5）
   - 并发500个10MB文件请求
   - 特殊字符URL测试（包含?#&等符号）

2. 异常用例：
   - 非法内网地址访问
   - 超长URL测试（>8KB）
   - 恶意慢速请求攻击

3. 性能基准：
   - 吞吐量：>800MB/s
   - 延迟波动：<±5%

验证方法：
使用vegeta进行压力测试，通过go test生成覆盖率报告


